# .github/workflows/docker-build.yml
name: Build and Push N8N API Manager Docker Image

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'scripts/**'
      - 'package.json'
      - 'Dockerfile'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch: # Allow manual triggers

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Build and Push Docker Image
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for better caching

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
        platforms: linux/amd64,linux/arm64

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=stable,enable=${{ github.ref == 'refs/heads/main' }}
        labels: |
          org.opencontainers.image.title=N8N API Manager
          org.opencontainers.image.description=Automated N8N API key creation and management
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          org.opencontainers.image.created=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=MIT
          maintainer=N8N API Management Team

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      id: build
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          VERSION=${{ github.sha }}
          BUILD_DATE=${{ steps.meta.outputs.labels['org.opencontainers.image.created'] }}
        
    - name: Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      if: github.event_name != 'pull_request'
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

    - name: Test Docker image functionality
      run: |
        echo "üß™ Testing Docker image functionality..."
        
        # Test basic container functionality
        docker run --rm \
          -e N8N_EDITOR_BASE_URL=https://demo.n8n.io \
          -e N8N_USER_EMAIL=test@example.com \
          -e N8N_USER_PASSWORD=dummy \
          -e SUPABASE_URL=https://dummy.supabase.co \
          -e SUPABASE_SERVICE_ROLE_KEY=dummy-key \
          -e USER_ID=test-user \
          --entrypoint=/bin/bash \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -c "
            echo 'üîç Testing Node.js and npm versions...'
            node --version
            npm --version
            
            echo 'üì¶ Testing package dependencies...'
            npm list --depth=0 2>/dev/null || true
            
            echo 'üîß Testing required modules...'
            node -e 'require(\"axios\"); require(\"puppeteer\"); require(\"@supabase/supabase-js\"); require(\"uuid\"); console.log(\"‚úÖ All required modules are available\");'
            
            echo 'üé≠ Testing Puppeteer setup...'
            node -e '
              const puppeteer = require(\"puppeteer\");
              (async () => {
                try {
                  console.log(\"üöÄ Testing Puppeteer launch...\");
                  const browser = await puppeteer.launch({ 
                    headless: true,
                    args: [\"--no-sandbox\", \"--disable-setuid-sandbox\"] 
                  });
                  console.log(\"‚úÖ Puppeteer launched successfully\");
                  await browser.close();
                  console.log(\"‚úÖ Puppeteer test completed\");
                } catch (error) {
                  console.error(\"‚ùå Puppeteer test failed:\", error.message);
                  process.exit(1);
                }
              })();
            '
            
            echo '‚úÖ Docker image functionality test passed!'
          "

  # Job 2: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write
      actions: read
      contents: read
      
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'container-scan'

    - name: Run Docker Scout vulnerability scan
      uses: docker/scout-action@v1
      if: github.event_name == 'push'
      with:
        command: cves
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        only-severities: critical,high
        exit-code: false # Don't fail the build on vulnerabilities
        write-comment: true

    - name: Generate security report
      run: |
        echo "üîí Security scan completed for image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "üìä Results uploaded to GitHub Security tab"

  # Job 3: Integration Testing
  integration-test:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Run integration tests
      run: |
        echo "üß™ Running integration tests..."
        
        # Test container can start and basic health check works
        docker run --rm -d \
          --name n8n-api-test \
          -e N8N_EDITOR_BASE_URL=https://httpbin.org \
          -e N8N_USER_EMAIL=test@example.com \
          -e N8N_USER_PASSWORD=testpassword123 \
          -e SUPABASE_URL=https://test.supabase.co \
          -e SUPABASE_SERVICE_ROLE_KEY=dummy-key-for-testing \
          -e USER_ID=test-user-123 \
          --entrypoint=/bin/bash \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          -c "sleep 30"
        
        # Check if container is running
        sleep 5
        if docker ps | grep -q n8n-api-test; then
          echo "‚úÖ Container started successfully"
        else
          echo "‚ùå Container failed to start"
          exit 1
        fi
        
        # Test environment validation
        docker exec n8n-api-test node -e "
          try {
            require('/app/scripts/create-api-key.js');
            console.log('‚úÖ Environment validation would work');
          } catch (error) {
            if (error.message.includes('Missing') || error.message.includes('Invalid')) {
              console.log('‚úÖ Environment validation works correctly');
            } else {
              console.error('‚ùå Unexpected error:', error.message);
              process.exit(1);
            }
          }
        "
        
        # Clean up
        docker stop n8n-api-test || true
        echo "‚úÖ Integration tests completed"

  # Job 4: Update Documentation
  update-readme:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Update README with latest image info
      run: |
        echo "üìù Updating README with latest image information..."
        
        # Create backup of README
        cp README.md README.md.backup
        
        # Update image tags in README
        sed -i "s|ghcr.io/${{ github.repository }}:.*|ghcr.io/${{ github.repository }}:latest|g" README.md || true
        
        # Update Docker run commands with latest image
        sed -i "s|docker run.*ghcr.io/${{ github.repository }}:[^[:space:]]*|docker run --rm ghcr.io/${{ github.repository }}:latest|g" README.md || true
        
        # Add build status badge if not exists
        if ! grep -q "Build Status" README.md; then
          sed -i '1i[![Build Status](https://github.com/${{ github.repository }}/workflows/Build%20and%20Push%20N8N%20API%20Manager%20Docker%20Image/badge.svg)](https://github.com/${{ github.repository }}/actions)\n' README.md
        fi
        
        # Update timestamp
        echo "" >> README.md
        echo "<!-- Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC') -->" >> README.md
        echo "<!-- Latest image: ghcr.io/${{ github.repository }}:${{ github.sha }} -->" >> README.md
        
        # Check if there are changes to commit
        if git diff --exit-code README.md > /dev/null; then
          echo "‚ÑπÔ∏è No changes to README.md"
        else
          echo "üìù README.md has been updated"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "üìù Update README with latest image info [skip ci]" || exit 0
          git push
          echo "‚úÖ README.md updated and pushed"
        fi

  # Job 5: Cleanup and Notification
  cleanup-and-notify:
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, integration-test, update-readme]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Calculate build status
      id: status
      run: |
        BUILD_STATUS="${{ needs.build-and-push.result }}"
        SECURITY_STATUS="${{ needs.security-scan.result }}"
        INTEGRATION_STATUS="${{ needs.integration-test.result }}"
        README_STATUS="${{ needs.update-readme.result }}"
        
        echo "build_status=$BUILD_STATUS" >> $GITHUB_OUTPUT
        echo "security_status=$SECURITY_STATUS" >> $GITHUB_OUTPUT
        echo "integration_status=$INTEGRATION_STATUS" >> $GITHUB_OUTPUT
        echo "readme_status=$README_STATUS" >> $GITHUB_OUTPUT
        
        if [ "$BUILD_STATUS" == "success" ] && [ "$SECURITY_STATUS" == "success" ]; then
          echo "overall_status=success" >> $GITHUB_OUTPUT
          echo "status_emoji=‚úÖ" >> $GITHUB_OUTPUT
        else
          echo "overall_status=failure" >> $GITHUB_OUTPUT  
          echo "status_emoji=‚ùå" >> $GITHUB_OUTPUT
        fi

    - name: Generate build summary
      run: |
        echo "## üê≥ N8N API Manager Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Information:**" >> $GITHUB_STEP_SUMMARY
        echo "- üè∑Ô∏è **Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- üìÖ **Build Date:** \`$(date -u '+%Y-%m-%d %H:%M:%S UTC')\`" >> $GITHUB_STEP_SUMMARY
        echo "- üîó **Commit:** [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
        echo "- üåø **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Job Results:**" >> $GITHUB_STEP_SUMMARY
        echo "- üî® **Build & Push:** ${{ steps.status.outputs.status_emoji }} ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- üîí **Security Scan:** ${{ steps.status.outputs.status_emoji }} ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- üß™ **Integration Test:** ${{ steps.status.outputs.status_emoji }} ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- üìù **Documentation:** ${{ steps.status.outputs.status_emoji }} ${{ needs.update-readme.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.status.outputs.overall_status }}" == "success" ]; then
          echo "### ‚úÖ Build Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The N8N API Manager image has been built, tested, and is ready for deployment:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull the latest image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Or use specific SHA" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Build Failed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the failed jobs above and fix any issues." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Notify build status
      run: |
        if [ "${{ steps.status.outputs.overall_status }}" == "success" ]; then
          echo "‚úÖ Build and security scan completed successfully"
          echo "üê≥ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "üîí Security scan passed"
          echo "üß™ Integration tests passed"
          echo "üìù Documentation updated"
        else
          echo "‚ùå Build pipeline failed"
          echo "üìä Build status: ${{ needs.build-and-push.result }}"
          echo "üîí Security status: ${{ needs.security-scan.result }}"
          echo "üß™ Integration status: ${{ needs.integration-test.result }}"
          echo "üìù Documentation status: ${{ needs.update-readme.result }}"
        fi

    - name: Clean up old images (if needed)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "üßπ Cleanup job would run here if needed"
        echo "This could include cleaning up old image versions from the registry"
